from mutations import *

import copy

import z3

import pcpp
from io import StringIO

from score_ast import *
import pickle

from score_tests import *
import math
import random
import datetime

# Early applicarion of AI --> MatEng
# Find the stat of interest; compare wrt this?
# Find stats of interest; evaluate wrt this; all behaviors you can compare...
# Code similarity metrics; output
# AST hamming distance
# Compare the control flow
# Explain how it works in the presentation
# Send introductory slides beforehand

def greedy(ast, itr = 100, steps = 10):

    ast = clean_and_preprocess(ast)

    org_ast = copy.deepcopy(ast)
    best_ast = copy.deepcopy(ast)
    best_score = score(org_ast, best_ast)

    scores = []
    for _ in tqdm(range(itr)):
        candidate = MC_mutate(copy.deepcopy(best_ast), steps, False)
        candidate_score = score(candidate, org_ast)
        #print(candidate_score, simplify_cfg_graph(build_cfg_from_ast(candidate)).number_of_nodes())
        scores.append(best_score)
        if candidate_score <= best_score:
            best_score = candidate_score
            best_ast = candidate

    return best_ast, best_score, scores

def MC_optimize(ast, iterations=100, steps = 10):

    ast = clean_and_preprocess(ast)

    current_ast = copy.deepcopy(ast)
    org_ast = copy.deepcopy(ast)
    best_ast = copy.deepcopy(ast)
    best_score = score(ast, best_ast)
    current_score = best_score
    scores = []

    for i in tqdm(range(iterations)):
        candidate = MC_mutate(copy.deepcopy(current_ast), steps, False)
        candidate_score = score(candidate, org_ast)
        
        scores.append(best_score)

        # Update best solution if candidate is better
        if candidate_score < best_score:
            best_score = candidate_score
            best_ast = candidate

        # Calculate acceptance probability
        if candidate_score < current_score:
            acceptance_probability = 1.0
        else:
            if (candidate_score > math.exp(7)):
                acceptance_probability = 0.0
            else:
                acceptance_probability = candidate_score / current_score

        if random.random() < acceptance_probability:
            current_ast = candidate
            current_score = candidate_score

        print(f"Iteration {i+1}: Candidate Score = {candidate_score}")

    return best_ast, best_score, scores


def simulated_annealing_optimize(ast, iterations=100, steps = 10, temp_initial=1.0, temp_decay=0.995):

    ast = clean_and_preprocess(ast)

    current_ast = copy.deepcopy(ast)
    org_ast = copy.deepcopy(ast)
    best_ast = copy.deepcopy(ast)
    best_score = score(ast, best_ast)
    current_score = best_score
    temperature = temp_initial

    scores = []

    for i in tqdm(range(iterations)):
        candidate = MC_mutate(copy.deepcopy(current_ast), steps, False)
        candidate_score = score(candidate, org_ast)
        
        scores.append(best_score)

        # Update best solution if candidate is better
        if candidate_score < best_score:
            best_score = candidate_score
            best_ast = candidate

        # Calculate acceptance probability
        if candidate_score < current_score:
            acceptance_probability = 1.0
        else:

            if (temperature == 0):
                acceptance_probability = 0
            else:
                if (candidate_score != current_score):
                    print(candidate_score, current_score, current_score - candidate_score, temperature)
                    print((current_score - candidate_score) / temperature, math.exp((current_score - candidate_score) / temperature))
                acceptance_probability = math.exp((current_score - candidate_score) / temperature)

        if random.random() < acceptance_probability:
            current_ast = candidate
            current_score = candidate_score

        temperature *= temp_decay
        print(f"Iteration {i+1}: Candidate Score = {candidate_score}, Temperature = {temperature}")

    return best_ast, best_score, scores

def grad_optimization(ast, iterations=100, steps = 10):

    ast = clean_and_preprocess(ast)

    current_ast = copy.deepcopy(ast)
    org_ast = copy.deepcopy(ast)
    best_ast = copy.deepcopy(ast)
    best_score = score(ast, best_ast)
    current_score = best_score

    scores = []

    hot_vector = [0 for i in range(8)]

    for i in tqdm(range(iterations)):

        cands = []
        for pos in range(len(hot_vector)):
            
            hot_vector = np.array([0]*8)
            hot_vector[pos] = 1

            candidate = mutate_vector_style(copy.deepcopy(current_ast), 1, False, hot_vector)
            candidate_score = score(candidate, org_ast)
            cands.append((candidate, candidate_score))



        best_cand = min(cands, key=lambda k : k[1])

        if (best_cand[1] < best_score):
            current_ast = best_cand[0]
            best_score = best_cand[1]
        
        scores.append(best_score)

        # Update best solution if candidate is better
       

    return best_ast, best_score, scores

g_scores = [500.0, 494.0, 489.0, 484.0, 478.0, 478.0, 475.0, 471.0, 471.0, 461.0, 460.0, 460.0, 460.0, 460.0, 458.0, 456.0, 452.0, 445.0, 445.0, 445.0, 443.0, 443.0, 441.0, 439.0, 439.0, 436.0, 436.0, 434.0, 434.0, 434.0, 434.0, 434.0, 427.0000000000002, 425.0000000056028, 425.0000000056028, 423.00000001523, 423.00000001523, 422.0000000413994, 422.0000000413994, 418.0000008315287, 418.0000008315287, 412.0000167017008, 406.00247875217667, 404.00673794699907, 404.00673794699907, 404.00673794699907, 404.00673794699907, 404.00673794699907, 404.00673794699907, 404.00673794699907, 404.00673794699907, 404.00673794699907, 404.00673794699907, 404.00673794699907, 404.00673794699907, 404.00673794699907, 401.0497870683679, 401.0497870683679, 401.0497870683679, 401.0497870683679, 401.0497870683679, 401.0497870683679, 401.0497870683679, 401.0497870683679, 401.0497870683679, 401.0497870683679, 401.0497870683679, 401.0497870683679, 401.0497870683679, 401.0497870683679, 401.0497870683679, 401.0497870683679, 401.0497870683679, 401.0497870683679, 401.0497870683679, 399.36787944117145, 399.36787944117145, 399.36787944117145, 399.36787944117145, 399.36787944117145, 399.36787944117145, 399.36787944117145, 399.36787944117145, 399.36787944117145, 399.36787944117145, 399.36787944117145, 399.36787944117145, 399.36787944117145, 399.36787944117145, 399.36787944117145, 399.36787944117145, 399.36787944117145, 399.36787944117145, 399.36787944117145, 399.36787944117145, 399.36787944117145, 399.36787944117145, 399.36787944117145, 399.36787944117145, 399.36787944117145] 
mc_scores = [500.0, 498.0, 494.0, 484.0, 482.0, 480.0, 476.0, 474.0, 474.0, 474.0, 474.0, 474.0, 474.0, 474.0, 474.0, 474.0, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006, 472.00000000000006] 
#sa_scores = [500.0, 494.0, 492.0, 492.0, 490.0, 488.0, 488.0, 488.0, 484.0, 479.0, 477.0, 477.0, 477.0, 477.0, 477.0, 477.0, 472.0, 472.0, 468.00000000075823, 464.00000000206114, 464.00000000206114, 464.00000000206114, 464.0000000001026, 462.0000022603294, 462.0000022603294, 462.0000022603294, 462.0000022603294, 462.0000022603294, 462.0000022603294, 462.0000022603294, 462.0000022603294, 462.0000022603294, 462.0000022603294, 462.0000022603294, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 456.71828182845906, 456.71828182845906, 456.71828182845906, 456.71828182845906, 456.71828182845906, 456.71828182845906, 456.71828182845906, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 452.71828182845906, 452.71828182845906, 452.71828182845906, 452.71828182845906]
#sa_scores = [500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 498.0, 498.0, 498.0, 498.0, 496.0, 494.0, 492.0, 490.0, 490.0, 490.0, 490.0, 490.0, 490.0, 490.0, 490.0, 490.0, 490.0, 490.0, 490.0, 490.0, 488.0, 488.0, 488.0, 488.0, 488.0, 488.0, 488.0, 488.0, 488.0, 488.0, 488.0, 488.0, 486.0, 486.0, 486.0, 486.0, 486.0, 486.0, 486.0, 486.0, 486.0, 484.0, 484.0, 484.0, 484.0, 481.0, 479.0, 479.0, 479.0, 477.0, 477.0, 477.0, 477.0, 477.0, 477.0, 474.0, 474.0, 474.0, 474.0, 474.0, 474.0, 474.0, 474.0, 474.0, 474.0, 472.0, 470.0, 470.0, 470.0, 470.0, 468.0, 468.0, 468.0, 468.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 455.0, 452.0, 452.0, 452.0, 452.0, 452.0, 452.0, 452.0, 452.0, 452.0, 452.0, 452.0, 452.0, 450.0, 448.0, 448.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 443.0, 443.0, 443.0, 443.0, 443.0, 443.0, 443.0, 443.0, 441.0, 441.0, 441.0, 441.0, 441.0, 441.0, 441.0, 441.0, 438.0, 438.0, 438.0, 438.0, 438.0, 436.0, 436.0, 436.0, 436.0, 434.0, 434.0, 434.0, 434.0, 434.0, 434.0, 434.0, 434.0, 434.0, 434.0, 434.0, 434.0, 434.0, 434.0, 434.0, 434.0, 434.0, 434.0, 434.0, 434.0, 434.0, 434.0, 434.0, 434.0, 434.0, 434.0, 434.0, 434.0, 431.0000000000019, 431.0000000000019, 431.0000000000019, 431.0000000000019, 431.0000000000019, 431.0000000000019, 431.0000000000019, 431.0000000000019, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 429.0000001125352, 427.0000022603294, 427.0000022603294, 423.00000614421236, 423.00000614421236, 423.00000614421236, 423.00000614421236, 423.00000614421236, 420.0000453999298, 420.0000453999298, 420.0000453999298, 420.0000453999298, 418.0001234098041, 418.0001234098041, 418.0001234098041, 418.0001234098041, 418.0001234098041, 418.0001234098041, 418.0001234098041, 418.0001234098041, 418.0001234098041, 418.0001234098041, 418.0001234098041, 418.0001234098041, 418.0001234098041, 418.0001234098041, 418.0001234098041, 418.0001234098041, 418.0001234098041, 418.0001234098041, 418.0001234098041, 418.0001234098041, 418.0001234098041, 418.0001234098041, 416.0003354626279, 414.0009118819656, 414.0009118819656, 414.0009118819656, 414.0009118819656, 414.0009118819656, 414.0009118819656, 414.0009118819656, 412.0009118819656, 412.0009118819656, 412.0009118819656, 409.00247875217667, 409.00247875217667, 409.00247875217667, 409.00247875217667, 409.00247875217667, 409.00247875217667, 409.00247875217667, 409.00247875217667, 409.00247875217667, 407.01831563888874, 407.01831563888874, 407.01831563888874, 407.01831563888874, 407.01831563888874, 407.01831563888874, 407.01831563888874, 407.01831563888874, 407.01831563888874, 404.0497870683679, 404.0497870683679, 404.0497870683679, 404.0497870683679, 404.0497870683679, 404.0497870683679, 404.0497870683679, 404.0497870683679, 404.0497870683679, 404.0497870683679, 404.0497870683679, 401.36787944117145, 401.36787944117145, 401.36787944117145, 401.36787944117145, 401.36787944117145, 401.36787944117145, 401.36787944117145, 401.36787944117145, 401.36787944117145, 401.36787944117145, 399.36787944117145, 399.36787944117145, 399.36787944117145, 399.36787944117145, 399.36787944117145, 393.71828182845906, 393.71828182845906, 393.71828182845906, 393.71828182845906, 393.71828182845906, 393.71828182845906, 393.71828182845906, 393.71828182845906, 393.71828182845906, 393.71828182845906, 393.71828182845906, 393.71828182845906, 393.71828182845906, 393.71828182845906, 393.71828182845906, 393.71828182845906, 393.71828182845906, 393.71828182845906, 393.71828182845906, 393.71828182845906, 393.71828182845906, 393.71828182845906, 393.71828182845906, 393.71828182845906, 393.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.71828182845906, 391.36787944117145, 391.36787944117145, 391.36787944117145, 391.36787944117145, 391.36787944117145, 391.36787944117145, 391.36787944117145, 391.36787944117145, 390.0, 390.0, 390.0, 390.0, 390.0, 390.0, 390.0, 390.0, 390.0, 390.0, 390.0, 390.0, 390.0, 390.0, 390.0, 390.0, 390.0, 390.0, 390.0, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906, 389.71828182845906]
#g_scores = [500.0, 500.0, 500.0, 498.0, 498.0, 498.0, 498.0, 498.0, 496.0, 496.0, 496.0, 494.0, 494.0, 492.0, 492.0, 492.0, 492.0, 490.0, 490.0, 490.0, 490.0, 487.0, 487.0, 487.0, 485.0, 485.0, 485.0, 485.0, 485.0, 485.0, 485.0, 485.0, 485.0, 485.0, 483.0, 483.0, 483.0, 483.0, 483.0, 483.0, 483.0, 483.0, 483.0, 483.0, 481.0, 481.0, 481.0, 479.0, 479.0, 479.0, 479.0, 479.0, 477.0, 477.0, 477.0, 477.0, 477.0, 477.0, 477.0, 477.0, 477.0, 477.0, 477.0, 477.0, 477.0, 477.0, 477.0, 477.0, 477.0, 477.0, 477.0, 477.0, 475.0, 475.0, 475.0, 475.0, 475.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 473.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 471.0, 469.0, 469.0, 469.0, 469.0, 469.0, 469.0, 469.0, 469.0, 469.0, 469.0, 469.0, 469.0, 469.0, 469.0, 469.0, 469.0, 469.0, 469.0, 469.0, 469.0, 469.0, 469.0, 469.0, 469.0, 469.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 467.0, 465.0, 465.0, 465.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 463.0, 461.0, 461.0, 461.0, 461.0, 461.0, 459.0, 459.0, 459.0, 459.0, 457.0, 457.0, 457.0, 457.0, 457.0, 457.0, 455.0, 455.0, 455.0, 453.0, 451.0, 451.0, 451.0, 451.0, 451.0, 451.0, 451.0, 451.0, 451.0, 451.0, 449.0, 449.0, 449.0, 449.0, 449.0, 449.0, 449.0, 449.0, 449.0, 449.0, 449.0, 449.0, 449.0, 447.0, 447.0, 447.0, 447.0, 447.0, 447.0, 447.0, 447.0, 447.0, 447.0, 447.0, 447.0, 447.0, 447.0, 447.0, 447.0, 447.0, 447.0, 447.0, 447.0, 447.0, 447.0, 447.0, 447.0, 447.0, 447.0, 447.0, 447.0, 447.0, 447.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 445.0, 443.0, 443.0, 441.0, 441.0, 441.0, 439.0, 437.0, 437.0, 437.0, 437.0, 437.0, 437.0, 437.0, 437.0, 437.0, 437.0, 435.0, 435.0, 435.0, 435.0, 435.0, 435.0, 435.0, 435.0, 435.0, 435.0, 435.0, 435.0, 435.0, 435.0, 435.0, 435.0, 433.0, 431.0, 431.0, 431.0, 431.0, 431.0, 431.0, 431.0, 431.0, 431.0, 431.0, 431.0, 431.0, 431.0, 431.0, 431.0, 429.0, 429.0, 429.0, 429.0, 429.0, 429.0, 429.0, 429.0, 429.0, 429.0, 429.0, 429.0, 429.0, 429.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 427.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 425.0, 423.0, 423.0, 423.0, 423.0, 423.0, 423.0, 423.0, 423.0, 423.0, 423.0, 423.0, 423.0, 423.0, 423.0, 423.0, 423.0, 423.0, 423.0, 423.0, 423.0, 421.0, 421.0, 421.0, 421.0, 421.0, 421.0, 421.0, 421.0, 421.0, 421.0, 421.0, 421.0, 421.0, 419.0, 419.0, 419.0, 419.0, 419.0, 419.0, 419.0, 419.0, 419.0, 419.0, 419.0, 419.0, 419.0, 419.0, 419.0, 417.0, 417.0, 417.0, 417.0, 417.0, 417.0, 417.0, 417.0, 417.0, 417.0, 417.0, 417.0, 417.0, 417.0, 417.0, 417.0, 417.0, 417.0, 415.0, 415.0, 415.0, 415.0, 415.0, 415.0, 415.0, 415.0, 415.0, 415.0, 415.0, 415.0, 415.0, 413.0, 411.0, 409.0, 409.0, 409.0, 409.0, 409.0, 409.0, 409.0, 409.0, 409.0, 409.0, 409.0, 409.0, 409.0, 409.0, 409.0, 409.0, 409.0, 409.0, 409.0, 409.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 407.0, 405.0, 405.0, 405.0, 405.0, 405.0, 405.0, 405.0, 405.0, 405.0, 405.0, 405.0, 405.0, 405.0, 405.0, 405.0, 405.0, 405.0, 405.0, 405.0, 405.0, 405.0, 405.0, 405.0, 405.0, 405.0, 405.0, 405.0, 405.0, 405.0, 405.0, 405.0, 403.0, 403.0, 403.0, 403.0, 403.0, 401.0, 401.0, 401.0, 401.0, 401.0, 401.0, 401.0, 401.0, 401.0, 401.0, 401.0, 401.0, 401.0, 401.0, 401.0, 401.0, 401.0, 401.0, 401.0, 401.0, 401.0, 401.0, 401.0, 401.0, 401.0, 401.0, 401.0, 401.0, 401.0, 399.0, 399.0, 399.0, 399.0, 399.0, 399.0, 399.0, 399.0, 399.0, 399.0, 399.0, 399.0, 399.0, 399.0, 399.0, 399.0, 399.0, 399.0, 397.0, 397.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 395.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 393.0, 391.0, 391.0, 391.0, 391.0, 391.0, 391.0, 391.0, 391.0, 391.0, 391.0, 391.0, 391.0, 391.0, 391.0, 391.0, 391.0, 391.0, 391.0, 391.0, 389.0, 389.0, 389.0, 389.0, 389.0, 389.0, 387.0, 387.0, 387.0, 385.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 379.0, 379.0, 379.0, 379.0, 379.0, 379.0, 379.0, 379.0, 379.0, 379.0, 379.0, 379.0, 379.0, 379.0, 379.0, 379.0, 379.0, 379.0, 379.0, 379.0, 379.0]

def main():
    s = "0x" + random.randbytes(5).hex()
    #s = b'\x93e\x0c\xb9\xf3'
    #s = b'\x1e\xf8\xfdlp'
    print(s)
    random.seed(s)

    init_rand_names()

    # Example C code including control flow constructs.
    c_code = open("sample.c", "r").read()

    pp = pcpp.Preprocessor()
    pp.parse(c_code)
    output = StringIO()
    pp.write(output)
    c_code = output.getvalue()

    parser = c_parser.CParser()
    ast = parser.parse(c_code)

    ast = clean_and_preprocess(ast)

    #ast = opaquify(ast)
    #show_cfg(ast)

    #render_cfg(build_cfg_from_ast(ast))    

    #old_ast = copy.deepcopy(ast)
    #autocorr_graph_edit_distance(ast)

    #ast = MC_mutate(ast, 1000)

    #characterize_score(ast, score)

    N = 100

    n_steps = 1

    r_trials = 1

    greedy_scores = []

    for i in range(r_trials):
        best_ast, greedy_score, g_scores = greedy(copy.deepcopy(ast), N, n_steps)
        greedy_scores.append(g_scores)

    greedy_scores = np.array(greedy_scores)

    greedy_scores = [np.mean(greedy_scores[:,i]) for i in range(len(greedy_scores[0]))]
    plt.plot(np.linspace(0, len(greedy_scores), len(greedy_scores)), greedy_scores, label=f"Greedy")
    # best_ast, mc_score, mc_scores = MC_optimize(copy.deepcopy(ast), N, n_steps)

    #print(greedy_score)

    gradient_scores = []
    for i in range(r_trials):
        best_ast, grad_score, grad_scores = grad_optimization(copy.deepcopy(ast), N, n_steps)
        gradient_scores.append(grad_scores)
    gradient_scores = np.array(gradient_scores)

    gradient_scores = [np.mean(gradient_scores[:,i]) for i in range(len(gradient_scores[0]))]
    plt.plot(np.linspace(0, len(gradient_scores), len(gradient_scores)), gradient_scores, label=f"Gradient")


    #print(mc_score, annealing_score)

    # print(g_scores)
    #print(mc_scores



    

    # plt.plot(np.linspace(0, len(mc_scores), len(mc_scores)), mc_scores, label="MC scores")

    t_int = 1.0
    t_dec = .95


    simanneal_scores = []
    for i in range(r_trials):
        best_ast, annealing_score, sa_scores = simulated_annealing_optimize(copy.deepcopy(ast), N, n_steps, temp_initial=t_int, temp_decay=t_dec)
        simanneal_scores.append(sa_scores)

    simanneal_scores = np.array(simanneal_scores)

    simanneal_scores = [np.mean(simanneal_scores[:,i]) for i in range(len(simanneal_scores[0]))]    


    plt.plot(np.linspace(0, len(simanneal_scores), len(simanneal_scores)), simanneal_scores, label=f"SA scores (T0 = {t_int}, td = {t_dec})")
    plt.xlabel("Step Number")
    plt.ylabel("Best Score")
    plt.title(f"Best Score vs Step Number (Avg over {r_trials} Trials)")
    plt.legend(loc='best')
    plt.savefig("figure.png")
    plt.show()
    #characterize_edit_dist(ast)

        # Prepare a dict with the scores.
    all_scores = {
        "g_scores": greedy_scores,
        "mc_scores": mc_scores,
        "sa_scores": simanneal_scores,  # using the averaged SA scores
        "sa_settings":{"t_int":t_int, "t_dec":t_dec}
    }

    # Generate a filename with current datetime.
    filename = datetime.datetime.now().strftime("scores_%Y%m%d_%H%M%S.pkl")

    # Save the scores using pickle.
    with open(filename, "wb") as f:
        pickle.dump(all_scores, f)

    print(f"Scores saved to {filename}")

    #render_cfg(gen_simplified_cfg(ast))    
    

    #render_cfg(build_cfg_from_ast(ast))
    #render_cfg(gen_simplified_cfg(ast))    


    #proc_edit_dist_data()

    generator = c_generator.CGenerator()

    # code = generator.visit(best_ast)
    # code = remove_whitespace(code)

    #print("Compilation succeeded:", compile_c_code(code, False), "\nTests passed:", compile_and_test(code))
    #show_cfg(ast)

if __name__ == "__main__":
    main()
